<h1>About</h1>
<p>團員:41023125 41023128</p>
<p>倉儲:<a href="https://github.com/mdecd2023/2a-pj1ag4/">https://github.com/mdecd2023/2a-pj1ag4/</a></p>
<p>網站:<a href="https://mdecd2023.github.io/2a-pj1ag4/">https://mdecd2023.github.io/2a-pj1ag4/</a></p>
<h1>w3</h1>
<p>w3 - 2023.03.10.16 已經完成分組網頁者, 可以得到分組網頁評分</p>
<p>w3 - 請各組寫一個程式判定 2a 哪一組已經完成網頁建置.</p>
<p>w3 開始執行<span> </span><a href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a></p>
<p>星期四補課時間, 要驗收 Tutorial1 (心得, 展示頁面說明各組員所完成項目, 說明該組的專案規劃)</p>
<p></p>
<p></p>
<p></p>
<p> </p>
<p>編寫檢查網頁建置程式 :<a href="https://mdecd2023.github.io/2a-pj1ag4/content/check.html">cmsimde_site (mdecd2023.github.io)</a></p>
<h1>Tutorial1</h1>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/bubbleRob1.mp4" type="video/mp4"/></video>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/bubbleRobfinal.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/Finish.mp4" type="video/mp4"/></video></div>
<iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/qE4kA0wqKWk" title="YouTube video player" width="560"></iframe>
<p><a href="/downloads/bubbleRob.ttt">bubbleRob本體</a></p>
<p><a href="/downloads/slider.ttt">slider</a></p>
<p><a href="/downloads/wheels.ttt">wheels</a></p>
<p></p>
<p>心得:</p>
<p> 41023125:</p>
<p> 一開始編<span>寫一個程式判定 2a 哪一組已經完成網頁建置的作業中</span></p>
<p> 最初始使用python中的<span>requests與</span>lxml模組編寫出 <a href="https://gist.githubusercontent.com/41023125/e8ad5766005cde195dd09a503cfc8d43/raw/3efd8bbd6519df9c7a13e7350f9074d9019d5d1d/checkpy.txt">checkpy.txt</a></p>
<p> 之後將其導入Brython發現出現錯誤ModuleNotFoundError: requests</p>
<p> 發現<span>brython 中沒有 </span><code>requests</code><span> 模組</span></p>
<p> 之後多次嘗試後參考<a href="https://mdecd2023.github.io/2a-pj1agx/content/2apj1.html">https://mdecd2023.github.io/2a-pj1agx/content/2apj1.html</a> </p>
<p> 提取出來網站網址與倉儲網址且檢查網站是否建立完成且只列出字串</p>
<p> 做出<a href="https://gist.githubusercontent.com/41023125/55fc22e3c4c66351ca2df5f910d32b57/raw/c351866507405700bbb4f6bbbad4e07760b69fce/check.txt">check.txt</a> 並將每段程式添加了註解 </p>
<p> 製作BubbleRob tutorial學到了<span>感測器的組裝</span></p>
<p><span> 在CoppeliaSim中的python程式中</span></p>
<p> 發現程式中的許多元件如左右馬達、感測器、畫面等都是 CoppeliaSim 中的物件，而程式中的 </p>
<p> sysCall_init、sysCall_sensing、sysCall_actuation、sysCall_cleanup 等則是 CoppeliaSim 定義好</p>
<p> 的 callback function，當特定事件發生時 CoppeliaSim 會呼叫相對應的 callback function 來執行特定</p>
<p> 的操作，例如 sysCall_actuation 則是當 CoppeliaSim 模擬器處理 actuation 時會被呼叫的 callback</p>
<p> function。</p>
<p> 透過這個程式範例，可以學習到 CoppeliaSim 中如何透過程式操控模擬器中的物件，以及如何透過   callback function 執行特定操作的方法</p>
<p> 雖然還是不太熟悉</p>
<p> 但至少能稍微理解</p>
</div><h1>notes</h1>
<h2>可攜程式研究</h2>
<h3>cms</h3>
<pre class="brush:bash;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
# for Linux and Mac
python3 cmsimde/wsgi.py</pre>
<p>啟動wsgi.py</p>
<p>在前面可以加入</p>
<pre class="brush:bash;auto-links:false;toolbar:false" contenteditable="false">@echo off
REM 關閉命令行窗口的回顯
start https://127.0.0.1:9443/
REM 啟動默認瀏覽器並打開指定網址

</pre>
<p></p>
<p></p>
<p>能在執行CMS開啟<span>wsgi.py的同時將要開啟的網頁打開</span></p><h3>wsgi.py</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/python

"""
Flask startup script
"""

import sys
import os

# 將目前檔案所在的目錄加到 Python 搜尋模組的路徑中
sys.path.append(os.path.join(os.path.dirname(__file__)))

# 載入 flaskapp 模組
import flaskapp

# 讀取 flaskapp 模組中的變數值
uwsgi = flaskapp.uwsgi
ip = flaskapp.ip
port = flaskapp.dynamic_port

if uwsgi:
    # 在遠端執行
    application = flaskapp.app
else:
    # 在本地端執行，開啟 Flask 網路伺服器
    flaskapp.app.run(
        host=ip,        # 網路伺服器的 IP 位置
        port=port,      # 網路伺服器的埠口號碼
        debug=True,     # 啟用除錯模式
        ssl_context="adhoc"     # 使用自簽憑證啟用 SSL 加密連線
    )
</pre><h2>check</h2>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
       url ="https://gist.githubusercontent.com/41023125/55fc22e3c4c66351ca2df5f910d32b57/raw/c351866507405700bbb4f6bbbad4e07760b69fce/check.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    #Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<p></p>