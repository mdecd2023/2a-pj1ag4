<h1>About</h1>
<p>團員:41023125 41023128</p>
<p>倉儲:<a href="https://github.com/mdecd2023/2a-pj1ag4/">https://github.com/mdecd2023/2a-pj1ag4/</a></p>
<p>網站:<a href="https://mdecd2023.github.io/2a-pj1ag4/">https://mdecd2023.github.io/2a-pj1ag4/</a></p>
<h1>w3</h1>
<p>w3 - 2023.03.10.16 已經完成分組網頁者, 可以得到分組網頁評分</p>
<p>w3 - 請各組寫一個程式判定 2a 哪一組已經完成網頁建置.</p>
<p>w3 開始執行<span> </span><a href="https://mde.tw/pjcopsim/content/bubbleRobTutorial.html">https://mde.tw/pjcopsim/content/bubbleRobTutorial.html</a></p>
<p>星期四補課時間, 要驗收 Tutorial1 (心得, 展示頁面說明各組員所完成項目, 說明該組的專案規劃)</p>
<p></p>
<p></p>
<p></p>
<p> </p>
<p>編寫檢查網頁建置程式 :<a href="https://mdecd2023.github.io/2a-pj1ag4/content/check.html">cmsimde_site (mdecd2023.github.io)</a></p>
<h1>w5</h1>
<p>3/24 完成將bubbleRob 雙輪車調整成手動模式</p>
<p>利用awsd鍵進行移動</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/T_q7Wp_GK6A" title="YouTube video player" width="560"></iframe>觸發特定條件使<span>bubbleRob 雙輪車</span>回到原位</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/14i_4W1tOGk" title="YouTube video player" width="560"></iframe></p>
<p>待解決問題:</p>
<p>記分板製作</p>
<p>足球框製作</p>
<p>足球製作</p>
<p>觸發條件設定製作</p>
<p>連機問題</p>
<p></p>
<p></p>
<p>3/25 完成足球製作以及<span>觸發條件設定製作</span></p>
<p>使球觸碰到球門的感測器後重製球場</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/pgLG2eIy6lo" title="YouTube video player" width="560"></iframe></p>
<p><span>待解決問題:</span></p>
<p><span>增設另一邊的感測器</span></p>
<p><span>設定感測器只感測球</span></p>
<p><span>記分板製作</span></p>
<p><span>連機問題</span></p>
<p><span>球大小調整</span></p>
<p><span>不適合推球的問題</span></p>
<p><span>刪除多餘程式</span></p>
<p></p>
<p></p>
<p></p>
<p>3/26 增加放開鍵盤會停止、倒數計時、記分板</p>
<p>增加放開鍵盤一段時間後會將速度設為0直到按下鍵盤</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/oGEXV054pAk" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" src="/images/index.html"/>增加倒數計時與分數的面板</p>
<p>開始後開始倒數計時</p>
<p>時間到則結束</p>
<p><img caption="false" height="293" src="/images/326.png" width="554"/></p>
<p>兩邊感測與計算皆完成</p>
<p><img alt="" height="293" src="/images/326-2.png" width="560"/></p>
<p><span>待解決問題:</span></p>
<p><span>連機問題</span></p>
<p><span>球大小調整</span></p>
<p><span>設定感測器只感測球(如果將bubbleRob被感測關掉可以直接解決)</span></p>
<p><a href="/downloads/bubbleRob-time -score.ttt">bubbleRob-time -score.ttt</a></p>
<h1>w6</h1>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
       url ="https://gist.githubusercontent.com/41023125/5ebe048b352c1f37f7ac5603f8b90fbb/raw/a21f514652b41dcbf87eb6a24c7233174af6ab30/gistfile1.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<p></p><h1>Tutorial1</h1>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/bubbleRob1.mp4" type="video/mp4"/></video>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/bubbleRobfinal.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/Finish.mp4" type="video/mp4"/></video></div>
<iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/qE4kA0wqKWk" title="YouTube video player" width="560"></iframe>
<p><a href="/downloads/bubbleRob.ttt">bubbleRob本體</a></p>
<p><a href="/downloads/slider.ttt">slider</a></p>
<p><a href="/downloads/wheels.ttt">wheels</a></p>
<p><a href="https://mdecd2023.github.io/2a-pj1ag4/content/%E7%A8%8B%E5%BC%8F%E8%A7%A3%E6%9E%90.html">程式解析</a></p>
<p>心得:</p>
<p> 41023125:</p>
<p> 一開始編<span>寫一個程式判定 2a 哪一組已經完成網頁建置的作業中</span></p>
<p> 最初始使用python中的<span>requests與</span>lxml模組編寫出 <a href="https://gist.githubusercontent.com/41023125/e8ad5766005cde195dd09a503cfc8d43/raw/3efd8bbd6519df9c7a13e7350f9074d9019d5d1d/checkpy.txt">checkpy.txt</a></p>
<p> 之後將其導入Brython發現出現錯誤ModuleNotFoundError: requests</p>
<p> 發現<span>brython 中沒有 </span><code>requests</code><span> 模組</span></p>
<p> 之後多次嘗試後參考<a href="https://mdecd2023.github.io/2a-pj1agx/content/2apj1.html">https://mdecd2023.github.io/2a-pj1agx/content/2apj1.html</a> </p>
<p> 提取出來網站網址與倉儲網址且檢查網站是否建立完成且只列出字串</p>
<p> 做出<a href="https://gist.githubusercontent.com/41023125/55fc22e3c4c66351ca2df5f910d32b57/raw/c351866507405700bbb4f6bbbad4e07760b69fce/check.txt">check.txt</a> 並將每段程式添加了註解 </p>
<p> 製作BubbleRob tutorial學到了<span>感測器的組裝</span></p>
<p><span> 在CoppeliaSim中的python程式中</span></p>
<p> 發現程式中的許多元件如左右馬達、感測器、畫面等都是 CoppeliaSim 中的物件，而程式中的 </p>
<p> sysCall_init、sysCall_sensing、sysCall_actuation、sysCall_cleanup 等則是 CoppeliaSim 定義好</p>
<p> 的 callback function，當特定事件發生時 CoppeliaSim 會呼叫相對應的 callback function 來執行特定</p>
<p> 的操作，例如 sysCall_actuation 則是當 CoppeliaSim 模擬器處理 actuation 時會被呼叫的 callback</p>
<p> function。</p>
<p> 透過這個程式範例，可以學習到 CoppeliaSim 中如何透過程式操控模擬器中的物件，以及如何透過   callback function 執行特定操作的方法</p>
<p> 雖然還是不太熟悉</p>
<p> 但至少能稍微理解</p>
</div><h2>程式解析</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end
  
function sysCall_init()
    -- This is executed exactly once, the first time this script is executed
    bubbleRobBase=sim.getObject('.') -- this is bubbleRob's handle
    leftMotor=sim.getObject("./leftMotor") -- Handle of the left motor
    rightMotor=sim.getObject("./rightMotor") -- Handle of the right motor
    noseSensor=sim.getObject("./sensingNose") -- Handle of the proximity sensor
    minMaxSpeed={50*math.pi/180,300*math.pi/180} -- Min and max speeds for each motor
    backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode
    robotCollection=sim.createCollection(0)
    sim.addItemToCollection(robotCollection,sim.handle_tree,bubbleRobBase,0)
    distanceSegment=sim.addDrawingObject(sim.drawing_lines,4,0,-1,1,{0,1,0})
    robotTrace=sim.addDrawingObject(sim.drawing_linestrip+sim.drawing_cyclic,2,0,-1,200,{1,1,0})
    graph=sim.getObject('./graph')
    distStream=sim.addGraphStream(graph,'bubbleRob clearance','m',0,{1,0,0})
    -- Create the custom UI:
        xml = '&lt;ui title="'..sim.getObjectAlias(bubbleRobBase,1)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[
        &lt;hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/&gt;
        &lt;label text="" style="* {margin-left: 300px;}"/&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.create(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
end
  
function sysCall_sensing()
    local result,distData=sim.checkDistance(robotCollection,sim.handle_all)
    if result&gt;0 then
        sim.addDrawingObjectItem(distanceSegment,nil)
        sim.addDrawingObjectItem(distanceSegment,distData)
        sim.setGraphStreamValue(graph,distStream,distData[7])
    end
    local p=sim.getObjectPosition(bubbleRobBase,-1)
    sim.addDrawingObjectItem(robotTrace,p)
end
  
function sysCall_actuation()
    result=sim.readProximitySensor(noseSensor) -- Read the proximity sensor
    -- If we detected something, we set the backward mode:
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end
  
    if (backUntilTime&lt;sim.getSimulationTime()) then
        -- When in forward mode, we simply move forward at the desired speed
        sim.setJointTargetVelocity(leftMotor,speed)
        sim.setJointTargetVelocity(rightMotor,speed)
    else
        -- When in backward mode, we simply backup in a curve at reduced speed
        sim.setJointTargetVelocity(leftMotor,-speed/2)
        sim.setJointTargetVelocity(rightMotor,-speed/8)
    end
end
  
function sysCall_cleanup()
    simUI.destroy(ui)
end</pre>
<p>此為一段 Lua 腳本程式碼，用於控制 BubbleRob 模型在 V-REP 模擬環境中的行為。程式碼主要由四個函數組成：sysCall_init()、sysCall_sensing()、sysCall_actuation()、sysCall_cleanup()。</p>
<p>sysCall_init() 函數在程式一開始執行時被呼叫，主要用來初始化 BubbleRob 模型與 UI 介面。其中包括了建立 BubbleRob 模型的各種物件、建立畫布物件用來繪製 BubbleRob 移動的軌跡、建立 UI 介面等。</p>
<p>sysCall_sensing() 函數用於定期檢查 BubbleRob 前方是否有障礙物，若有則繪製出距離 BubbleRob 的距離測量值，同時也會繪製出 BubbleRob 移動的軌跡。</p>
<p>sysCall_actuation() 函數則用於根據 BubbleRob 的前方是否有障礙物來控制 BubbleRob 的移動。若前方無障礙物，則直接以固定速度向前移動；若前方有障礙物，則 BubbleRob 會以較慢的速度向後退，並且向右彎曲以避開障礙物。</p>
<p>sysCall_cleanup() 函數則在程式結束時被呼叫，主要用來清除創建的 UI 介面。</p>
<p></p>
<h2>coppeliasim lua</h2>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">sim.getObject('.')</pre>
<p><span> </span></p>
<p><span>sim.getObject('.') 的作用是獲取當前對象的句柄。在CoppeliaSim的Lua腳本中，'.' 表示當前腳本所屬的對象，因此 sim.getObject('.') 會返回當前腳本的句柄。</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">sim.createCollection(0)</pre>
<p><span>sim.createCollection(0) 的作用是創建一個新的對象集合，並返回該對象集合的句柄。參數0指定了創建的對象集合是空的。</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">sim.addItemToCollection(robotCollection,sim.handle_tree,bubbleRobBase,0)</pre>
<p><span>sim.addItemToCollection(robotCollection, sim.handle_tree, bubbleRobBase, 0) 的作用是將物體添加到指定的物體集合中。其中，robotCollection 是物體集合的句柄，sim.handle_tree 指定添加物體的關係類型，bubbleRobBase 是要添加的物體的句柄，0 表示不遞歸添加。該函數執行後，bubbleRobBase 將被添加到 robotCollection 物體集合中。</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">sysCall_actuation()</pre>
<p><span>sysCall_actuation()是CoppeliaSim Lua脚本中的一個函數，它是一個回調函數，會在每個仿真步驟中自動被調用。在這個函數中，你可以實現你的控制演算法，使得機器人可以移動、感知環境等等。通常，這個函數中會包含循環，來使得機器人可以持續執行控制演算法。</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">sim.message_keypress</pre>
<p><span>sim.message_keypress表示當用戶按下一個鍵時觸發的事件</span><br/><br/></p>
<p><span></span></p><h1>notes</h1>
<h2>可攜程式研究</h2>
<h3>cms</h3>
<pre class="brush:bash;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
# for Linux and Mac
python3 cmsimde/wsgi.py</pre>
<p>啟動wsgi.py</p>
<p>在前面可以加入</p>
<pre class="brush:bash;auto-links:false;toolbar:false" contenteditable="false">@echo off
REM 關閉命令行窗口的回顯
start https://127.0.0.1:9443/
REM 啟動默認瀏覽器並打開指定網址

</pre>
<p></p>
<p></p>
<p>能在執行CMS開啟<span>wsgi.py的同時將要開啟的網頁打開</span></p><h3>wsgi.py</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/python

"""
Flask startup script
"""

import sys
import os

# 將目前檔案所在的目錄加到 Python 搜尋模組的路徑中
sys.path.append(os.path.join(os.path.dirname(__file__)))

# 載入 flaskapp 模組
import flaskapp

# 讀取 flaskapp 模組中的變數值
uwsgi = flaskapp.uwsgi
ip = flaskapp.ip
port = flaskapp.dynamic_port

if uwsgi:
    # 在遠端執行
    application = flaskapp.app
else:
    # 在本地端執行，開啟 Flask 網路伺服器
    flaskapp.app.run(
        host=ip,        # 網路伺服器的 IP 位置
        port=port,      # 網路伺服器的埠口號碼
        debug=True,     # 啟用除錯模式
        ssl_context="adhoc"     # 使用自簽憑證啟用 SSL 加密連線
    )
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre><p><h33>flaskapp.py</h33></p><h3>flaskapp.py</h3><h2>check</h2>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
       url ="https://gist.githubusercontent.com/41023125/55fc22e3c4c66351ca2df5f910d32b57/raw/c351866507405700bbb4f6bbbad4e07760b69fce/check.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    #Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<p></p>
<h2>相關網站</h2>
<p><a href="https://mde.tw/pjcopsim/content/externalControllerTutorial.html">pjcopsim (mde.tw)</a></p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/">CoppeliaSim User Manual (coppeliarobotics.com)</a></p>
<p><a href="https://chat.openai.com/chat">chatGTP</a></p>
<p><a href="https://41023125.github.io/cp2021_hw/content/notes.html">cp2021 homework site (41023125.github.io)</a></p>
<p><a href="https://exam.cycu.org/">exam.cycu.org</a></p>