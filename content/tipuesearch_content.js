var tipuesearch = {"pages": [{'title': 'About', 'text': '團員:41023125 41023128 \n 倉儲: https://github.com/mdecd2023/2a-pj1ag4/ \n 網站: https://mdecd2023.github.io/2a-pj1ag4/ \n', 'tags': '', 'url': 'About.html'}, {'title': 'w3', 'text': 'w3 - 2023.03.10.16 已經完成分組網頁者, 可以得到分組網頁評分 \n w3 - 請各組寫一個程式判定 2a 哪一組已經完成網頁建置. \n w3 開始執行 \xa0 https://mde.tw/pjcopsim/content/bubbleRobTutorial.html \n 星期四補課時間, 要驗收 Tutorial1 (心得, 展示頁面說明各組員所完成項目, 說明該組的專案規劃) \n \n \n \n \xa0 \n 編寫檢查網頁建置程式 : cmsimde_site (mdecd2023.github.io) \n', 'tags': '', 'url': 'w3.html'}, {'title': 'Tutorial1', 'text': '\n \n \n \n bubbleRob本體 \n slider \n wheels \n \n 心得: \n \xa041023125: \n \xa0一開始編 寫一個程式判定 2a 哪一組已經完成網頁建置的作業中 \n \xa0最初始使用python中的 requests與 lxml模組編寫出\xa0 checkpy.txt \n \xa0之後將其導入Brython發現出現錯誤ModuleNotFoundError: requests \n \xa0發現 brython 中沒有  requests  模組 \n \xa0之後多次嘗試後參考 https://mdecd2023.github.io/2a-pj1agx/content/2apj1.html \xa0 \n \xa0提取出來網站網址與倉儲網址且檢查網站是否建立完成且只列出字串 \n \xa0做出 check.txt \xa0並將每段程式添加了註解\xa0 \n \xa0製作BubbleRob tutorial學到了 感測器的組裝 \n \xa0在CoppeliaSim中的python程式中 \n \xa0發現程式中的許多元件如左右馬達、感測器、畫面等都是 CoppeliaSim 中的物件，而程式中的\xa0 \n \xa0sysCall_init、sysCall_sensing、sysCall_actuation、sysCall_cleanup 等則是 CoppeliaSim 定義好 \n \xa0的 callback function，當特定事件發生時 CoppeliaSim 會呼叫相對應的 callback function 來執行特定 \n \xa0的操作，例如 sysCall_actuation 則是當 CoppeliaSim 模擬器處理 actuation 時會被呼叫的 callback \n \xa0function。 \n \xa0透過這個程式範例，可以學習到 CoppeliaSim 中如何透過程式操控模擬器中的物件，以及如何透過\xa0 \xa0callback function 執行特定操作的方法 \n \xa0雖然還是不太熟悉 \n \xa0但至少能稍微理解 \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': 'notes', 'text': '', 'tags': '', 'url': 'notes.html'}, {'title': '可攜程式研究', 'text': '', 'tags': '', 'url': '可攜程式研究.html'}, {'title': 'cms', 'text': '#! /bin/bash\n# for Linux and Mac\npython3 cmsimde/wsgi.py \n 啟動wsgi.py', 'tags': '', 'url': 'cms.html'}, {'title': 'wsgi.py', 'text': '#!/usr/bin/python\n\n"""\nFlask startup script\n"""\n\nimport sys\nimport os\n\n# 將目前檔案所在的目錄加到 Python 搜尋模組的路徑中\nsys.path.append(os.path.join(os.path.dirname(__file__)))\n\n# 載入 flaskapp 模組\nimport flaskapp\n\n# 讀取 flaskapp 模組中的變數值\nuwsgi = flaskapp.uwsgi\nip = flaskapp.ip\nport = flaskapp.dynamic_port\n\nif uwsgi:\n    # 在遠端執行\n    application = flaskapp.app\nelse:\n    # 在本地端執行，開啟 Flask 網路伺服器\n    flaskapp.app.run(\n        host=ip,        # 網路伺服器的 IP 位置\n        port=port,      # 網路伺服器的埠口號碼\n        debug=True,     # 啟用除錯模式\n        ssl_context="adhoc"     # 使用自簽憑證啟用 SSL 加密連線\n    )\n', 'tags': '', 'url': 'wsgi.py.html'}, {'title': 'check', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n', 'tags': '', 'url': 'check.html'}]};